# network interface
int_if="bge0" # thunderbolt to ethernet adaptor
vpn_if="tun0"
all_networks="0.0.0.0/0"

# tables
table <internet> { $all_networks, !self, !$int_if:network } # internet
table <lan> { $int_if:network, !self }                      # lan network
table <myself> { self }                                     # self
table <martians> { 0.0.0.0/8 10.0.0.0/8 127.0.0.0/8 169.254.0.0/16     \
	 	   172.16.0.0/12 192.0.0.0/24 192.0.2.0/24 224.0.0.0/3 \
	 	   192.168.0.0/16 198.18.0.0/15 198.51.100.0/24        \
	 	   203.0.113.0/24 }                         # broken networks

# Macros to define the set of TCP and UDP ports to open.
# Add additional ports or ranges separated by commas.
# 6881, 6882 = rtorrent. 22000, 21025 = syncthing
tcp_services = "{ ntp, 6881, 22000 }"
udp_services = "{ ntp, 6882, 21025 }"

# If you block all ICMP requests you will break things like path MTU
# discovery. These macros define allowed ICMP types. 
icmp_types = "{ echoreq, unreach }"

# Modulate the initial sequence number of TCP packets.
# Broken operating systems sometimes don't randomize this number,
# making it guessable.
tcp_state="flags S/SA keep state"
udp_state="keep state"

# Don't send rejections. Just drop.
set block-policy drop
set fingerprints "/etc/pf.os"

# dont block localhost
set skip on lo0

# scrub packets
scrub in all fragment reassemble no-df max-mss 1440

# block ipv6
block return out quick inet6 all
block in quick inet6 all

# block bogon networks
block in quick from { <martians> no-route urpf-failed } to any
block in log all

# emerging threats - anchor
anchor "emerging-threats"
load anchor "emerging-threats" from "/etc/pf.anchors/emerging-threats"

# openvpn - anchor
anchor "openvpn"

# allow out bound traffic
pass out quick on $int_if inet keep state

# antispoof
antispoof quick for ($int_if)
#antispoof quick for ($vpn_if)

# allow ICMP
pass inet proto icmp all icmp-type $icmp_types keep state 

# Allow the services defined in the macros at the top of the file
pass in on $int_if inet proto tcp from any to any port $tcp_services $tcp_state
pass in on $int_if inet proto udp from any to any port $udp_services $udp_state

